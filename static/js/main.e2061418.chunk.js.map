{"version":3,"sources":["Message.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Message","forwardRef","ref","message","isUser","username","className","Card","CardContent","Typography","color","variant","component","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","prompt","window","confirm","src","FormControl","Input","placeholder","value","onChange","event","target","IconButton","disabled","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","key","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"0VAuBeA,G,MAnBCC,sBAAW,WAAwBC,GAAS,IAA9BC,EAA6B,EAA7BA,QACpBC,EADiD,EAApBC,WACPF,EAAQE,SACpC,OACI,yBAAKH,IAAKA,EAAKI,UAAS,kBAAaF,GAAU,kBAC3C,kBAACG,EAAA,EAAD,CAAMD,UAAWF,EAAS,oBAAsB,sBAC5C,kBAACI,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,MAAM,QACNC,QAAQ,KACRC,UAAU,OAERR,GAAD,UAAcD,EAAQE,UAAY,eAAlC,MALL,IAK4DF,EAAQA,gB,iBCAzEU,EAbKC,IAASC,cAAc,CACnCC,OAAQ,oBACRC,WAAY,oBACZC,YAAa,oBACbC,UAAW,oBACXC,cAAe,oBACfC,kBAAmB,oBACnBC,MAAO,oBACPC,cAAe,sBAGAC,Y,iCCqERC,MAxEf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEmBF,mBAAS,IAF5B,mBAENG,EAFM,KAEIC,EAFJ,OAGmBJ,mBAAS,IAH5B,mBAGNrB,EAHM,KAGI0B,EAHJ,KA4Cb,OApCAC,qBAAU,WAERnB,EAAGoB,WAAW,YACXC,QAAQ,YAAa,QACrBC,YAAW,SAAAC,GACVN,EAAYM,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAK,CAACC,GAAID,EAAIC,GAAIrC,QAASoC,EAAIE,iBAEnE,IAEHT,qBAAU,WAKR,IAAM3B,EAAWqC,OAAO,4HACxBX,EAAY1B,GACZsC,OAAOC,QAAP,gCAAwCvC,EAAxC,4CACC,IAoBD,yBAAKC,UAAU,OACb,yBAAKuC,IAAI,+DACT,0CACA,4BAAKxC,EAAL,gCACA,4GAAiF,6BAAjF,cAEA,0BAAMC,UAAU,aACd,kBAACwC,EAAA,EAAD,CAAaxC,UAAU,oBACrB,kBAACyC,EAAA,EAAD,CAAOzC,UAAU,aAAa0C,YAAY,qCAAoCC,MAAOtB,EAAOuB,SAAU,SAAAC,GAAK,OAAIvB,EAASuB,EAAMC,OAAOH,UACrI,kBAACI,EAAA,EAAD,CAAY/C,UAAU,kBAAkBgD,UAAW3B,EAAOhB,QAAQ,YAAYD,MAAM,UAAU6C,KAAK,SAASC,QAxBhG,SAACL,GAEnBA,EAAMM,iBAEN5C,EAAGoB,WAAW,YAAYyB,IAAI,CAC5BvD,QAASwB,EACTtB,SAAUA,EACVsD,UAAW7C,IAASU,UAAUoC,WAAWC,oBAI3CjC,EAAS,MAcC,kBAAC,IAAD,SAKR,kBAAC,IAAD,KAEIC,EAASS,KAAI,gBAAEE,EAAF,EAAEA,GAAIrC,EAAN,EAAMA,QAAN,OACX,kBAAC,EAAD,CAAS2D,IAAKtB,EAAInC,SAAUA,EAAUF,QAASA,UC7DvC4D,QACW,cAA7BpB,OAAOqB,SAASC,UAEe,UAA7BtB,OAAOqB,SAASC,UAEhBtB,OAAOqB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM5E,c","file":"static/js/main.e2061418.chunk.js","sourcesContent":["import React, { forwardRef } from 'react'\nimport { Card, CardContent, Typography } from '@material-ui/core'\nimport \"./Message.css\";\n\nconst Message = forwardRef(({ message, username }, ref) => {\n    const isUser = username === message.username;\n    return (\n        <div ref={ref} className={`message ${isUser && 'message__user'}`}>\n            <Card className={isUser ? \"message__userCard\" : \"message__guestCard\"}>\n                <CardContent>\n                    <Typography\n                        color=\"white\"\n                        variant=\"h5\"\n                        component=\"h2\"\n                    >\n                        {!isUser && `${message.username || 'Unknown User'}: `} {message.message}\n                    </Typography>\n                </CardContent>\n            </Card>\n        </div>\n    )\n})\n\nexport default Message; \n","import firebase from \"firebase\";\n\nconst firebaseApp = firebase.initializeApp({\n        apiKey: \"Put your own ones\",\n        authDomain: \"Put your own ones\",\n        databaseURL: \"Put your own ones\",\n        projectId: \"Put your own ones\",\n        storageBucket: \"Put your own ones\",\n        messagingSenderId: \"Put your own ones\",\n        appId: \"Put your own ones\",\n        measurementId: \"Put your own ones\"\n})\n\nconst db = firebaseApp.firestore();\n\nexport default db; ","import React, { useState, useEffect } from 'react';\nimport { Button, FormControl, InputLabel, Input } from '@material-ui/core';\nimport './App.css';\nimport Message from './Message';\nimport db from './firebase';\nimport firebase from 'firebase';\nimport FlipMove from 'react-flip-move';\nimport SendIcon from '@material-ui/icons/Send';\nimport { IconButton } from '@material-ui/core';\n\nfunction App() {\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [username, setUsername] = useState('');\n\n  // useState = variable in react\n  // useEffect = run code on a condition in react\n\n  useEffect(() => {\n    // run once when the app component loads\n    db.collection('messages')\n      .orderBy('timestamp', 'desc')\n      .onSnapshot(snapshot => {\n        setMessages(snapshot.docs.map(doc => ({id: doc.id, message: doc.data()})))\n      });\n  }, [])\n\n  useEffect(() => {\n    // run code here\n    // it its blank inside [], this code runs ONCE when the app component loads\n    // const username = prompt('Please enter your name');\n    // setUsername(prompt('Please enter your name'));\n    const username = prompt('This info will not be shared with anyone! \\nPlease enter an anonymous name with which you want to register the complaint');\n    setUsername(username);\n    window.confirm(`Remember this name - \"${username}\" \\nThis id/name will be asked later!`)\n  }, []) // condition \n\n  // console.log(input);\n  // console.log(messages);\n  \n  const sendMessage = (event) => {\n    // all the logic to send message goes here\n    event.preventDefault();\n    \n    db.collection('messages').add({\n      message: input,\n      username: username,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n    \n    // setMessages([...messages, { username: username, text: input }]);\n    setInput('');\n  }\n  \n  return (\n    <div className=\"App\">\n      <img src=\"https://www.flaticon.com/svg/static/icons/svg/33/33308.svg\" />\n      <h1>Admin Desk</h1>\n      <h2>{username} tell us about your concern.</h2>\n      <h4>Don't use it as a spam as we can trace you back with your IP and MAC address!<br></br>Thank You!</h4>\n\n      <form className=\"app__form\">\n        <FormControl className=\"app__formControl\">\n          <Input className=\"app__input\" placeholder=\"Enter the complaint description...\"value={input} onChange={event => setInput(event.target.value)} />\n          <IconButton className=\"app__iconButton\" disabled={!input} variant=\"contained\" color=\"primary\" type='submit' onClick={sendMessage}>\n              <SendIcon  />\n          </IconButton>\n        </FormControl>\n      </form>\n\n      <FlipMove>\n        {\n          messages.map(({id, message}) => (\n            <Message key={id} username={username} message={message} />\n          ))\n        }\n      </FlipMove>\n\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}